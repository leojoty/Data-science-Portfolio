---
title: "Homework 2"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
#Problem 1A

library(triangle)
library(truncnorm)

nsim = 100000

#Parameters for deterministic variables

x <- runif(nsim, 25, 50)
y <- rtriangle(nsim, a = 10, b = 25, c = 15)
z <- rtruncnorm(nsim, mean = 6, sd = 2, a = 2)

T = x + y + z

mean(T)

#60.28569
```
```{r}
sd(T)

#8.114239
```

```{r}
hist(T)
```



```{r}
hist(T)
abline(v = 70, col = "red")

```
```{r}
#morethan70 <- sum(v>70)
#morethan70/nsim

#0
```
```{r}
quantile(T, c(0.025, 0.95))

#2.5 = 45.68026
#95 = 73.35015
```

```{r}
#Problem 2

#Error I made originally is I made my vectors deterministic even thought the problem clearly states that they are sto.

# Data
marketSize = rnorm(1, mean = 2200000, sd = 250000)
marketSizeGrowth = 0.05
marketShare = runif(1, .05, .1)
marketShareGrowth = 0.1
unitRevenue = 150
unitCost = 50
discountRate = 0.08

# Project Cost
rdCost = rtriangle(1, a = 500e6, b = 850e6, c = 750e6)
clinicalCost = runif(1, 135e6, 170e6)
projectCost = rdCost + clinicalCost
projectCost
## [1] 8.5e+08

#Model
AnnualProfit = function(year, marketSize, marketSizeGrowth
, marketShare, marketShareGrowth, unitRevenue, unitCost){
 marketSize = marketSize*(1+marketSizeGrowth)^(year-1)
 marketShare = marketShare*(1+marketShareGrowth)^(year-1)
 sale = marketSize*marketShare
 annualRevenue = 12*sale*unitRevenue
 annualCost = 12*sale*unitCost
 return(annualRevenue-annualCost)
}
```

```{r}
n_year = 5
Annual_profit <- AnnualProfit(1:n_year, marketSize, marketSizeGrowth, marketShare, marketShareGrowth, unitRevenue, unitCost)
year <- 1:n_year
data.frame(Annual_profit)
```


```{r}
netPresentProfit <- function(discountRate, Annual_profit, n_year){
 netProfit <- 0
 for(t in 1:n_year) {
 netProfit <- netProfit + Annual_profit [t]/(1+discountRate)^t
 }
 return(netProfit)
}

# Net present value of Annual profits
npvProfit <- netPresentProfit(discountRate, Annual_profit, n_year)
# Net present value after deducting the fixed project cost
npv = npvProfit - projectCost
npv
## [1] 185404860
# The net present value over the first 5 years is $312,519,637
```
```{r}
quantile(npv, c(0.025, 0.95))

#2.5 = 312519637
#95 = 312519637 
```

```{r}
library(triangle)
set.seed(123)

# Non-stochastic parameters
marketShareGrowth = 0.1
unitRevenue = 150
unitCost = 50
discountRate = 0.08

# Other parameters are stochastic, and we need to simulate them inside a for-loop.
num_sim = 100000
# Data
n_year = 5
# Here, we only produce one random variate for each parameter in each simulation iteration.
# We repeat the process num_sim times.
# Then, we record each calculated npv into a vector called simulated_npv.
# we start with an empty vecto for simulated_npv.

simulated_npv <- c()
for(i in 1:num_sim){
  marketSize = rnorm(1, mean = 2200000, sd = 250000)
  marketSizeGrowth = 0.05
  marketShareGrowth = 0.1
 
  #Project Cost
 rdCost = rtriangle(1, a = 500e6, b = 850e6, c = 750e6)

 clinicalCost = runif(1, 135e6, 170e6)
 
 marketShare = runif(1, min=0.05, max=0.1)

 projectCost = rdCost + clinicalCost
 
 #Annual profit function
 AnnualProfit = function(year, marketSize, marketSizeGrowth, marketShare, marketShareGrowth, unitRevenue, unitCost){
  marketSize = marketSize*(1+marketSizeGrowth)^(year-1)
  marketShare = marketShare*(1+marketShareGrowth)^(year-1)
  sale = marketSize*marketShare
  annualRevenue = 12*sale*unitRevenue
  annualCost = 12*sale*unitCost
  return(annualRevenue-annualCost)
}

 
 netPresentProfit = function(discountRate, profit, year){
  netProfit = 0
  for(t in 1:year) {
    netProfit = netProfit + profit[t]/(1+discountRate)^t
  }
  return(netProfit)
}


  #To measure
 Annual_profit <- AnnualProfit(1:n_year, marketSize,
marketSizeGrowth, marketShare, marketShareGrowth, unitRevenue, unitCost)

 npvProfit <- netPresentProfit(discountRate, Annual_profit, n_year)

 npv = npvProfit-projectCost
 
  # In each iteration, we insert a simulated value of npv to simulated_npv.
 #simulated_npv <- c(simulated_npv, npv)
}
# Now, we have produced 1000 instances of npv recorded inside simulated_npv.
# Q1: Risk: What proportion of times simulated_npv is not profitable?:
mean(npvProfit<=0)
## [1] 0.177
```


```{r}
hist(npv)
```

```{r}
#Problem 3

netProfitFun = function(D, Q, R, S, C){
  R*min(D,Q) + S * max(0, Q-D) - C*Q
}


R = 18 # Selling price

C = 12 # Cost
S = 10 # Discount Price

histDemand = read.csv("histDemand.csv") 


histDemand$Sales

#42 45 40 46 43 43 46 42 44 43 47 41 41 45 51 43 45 42 44 48
```


```{r}

mean(histDemand$Sales)

#44.05
```
```{r}
mean_D = 44.05

Q = 44.05

netProfitFun(mean_D, Q, R, S, C)
```

```{r}
quantile(histDemand$Sales, c(0.025, 0.95))

#2.5%    95% 
#40.475 48.150 
```


```{r}
netProfitFun = function(D, Q, R, S, C){
  R*min(D,Q) + S * max(0, Q-D) - C*Q
}


R = 18 # Selling price

C = 12 # Cost
S = 10 # Discount Price

newsvendor = read.csv("newsVendorData.csv") 

#Expected Profit do you suggest?
num_sim = 1000
# We evaluate a range of possible Q values
Qrange = 40:50
# Here, we need to change the data generating process to truncnorm distribution

library(truncnorm)
sim_D <- rtruncnorm(num_sim, a = 38, mean = 42, sd =
3.4) # resampling
profitMatrix <- matrix(nrow = num_sim, ncol = length(
Qrange))
j = 0
for (Q in Qrange) {
 j = j+1
 for (i in 1:num_sim) {
 profitMatrix[i, j] = netProfitFun(sim_D[i], Q, R,
S, C)
 }
}
# Expected (average) profit for each Q
profit_for_each_Q <- colMeans(profitMatrix)
cbind(Qrange, profit_for_each_Q)
```
  
```{r}
plot(Qrange, profit_for_each_Q, ylab = "Optimal purchase quantity", xlab = "Q")
best_Q_index <- which.max(profit_for_each_Q)
abline(v = Qrange[best_Q_index], h = profit_for_each_Q[best_Q_index], col = "red")
```

```{r}
profitMatrix <- matrix(nrow = num_sim, ncol = length(Qrange))

profit_for_each_Q <- colMeans(profitMatrix)
```


```{r}
boot_mean_profit <- function(x, Q, R, S, C){
  boot_sample <- sample(x, replace = TRUE)
  profit_sim <- c()
  for (i in 1: length(boot_sample)) {
    profit_sim = c(profit_sim, netProfitFun(boot_sample[i], Q, R, S, C))
    
  }
  return(mean(profit_sim))
}

X = 44.05

#Ideal Q

View(newsvendor)
```

```{r}
boot_mean_profit(X, Q, R, S, C)
#88.54545
```

```{r}
boot_sim <- boot_mean_profit(X, Q, R, S, C)
quantile(newsvendor$demand, c(0.025, 0.95))
#2.5%  95% 
#28   51 
```


```{r}

#plot(Qrange, profit_for_each_Q)

#best_Q_index <- which.max(profit_for_each_Q)
```

```{r}
#Problem 4 

num_sim = 1000
failCount = rpois(num_sim, 44.05) 
repairTime = rnorm(num_sim, mean=10.05, sd=1.51)
driveTime = runif(num_sim, min=16.6, max=29.7)
# Model
income_yearly = 2 * (repairTime + driveTime) * failCount
# Report
par(mfrow=c(1,1))
range = quantile(income_yearly, c(0.025, 0.975))
range
hist(income_yearly)
abline(v=c(range[1], range[2]), lty=2, col='blue')
mean(income_yearly)
sd(income_yearly)

```

```{r}
#Problem 5
#Here is a simple problem: This can be solved by hand easily, check notes

a = 11
c = 8
m = 200
R0 = 5
R1 = (a*R0 + c) %% m
(U1 = R1/m)
## [1] 0.25


# The following function implements a linear congruen tial generator with the given parameters above.
lcg.rand <- function(n, m, a, c, R0) { 
#Language, the name of the function is the algorithm and what it does = easy
  #Function, He must define new words in order to build sentences. Typically these parameters are given along with the algorithm. However if you are building the sentence (algorithm) then you have to define the parameters and give them a name
 if(a <= 0 ) stop ('a is not positive')
  #Now that the terminology is clear, he tells the brain what to do if a proposition is false as it can evaluate fallacies and bad inferences, it just needs clarity on what truth (argument) you are pursuing
 if(c < 0 ) stop ('c is not non-negative')
  #More conditions
 if(m <= max(a,c,R0)) stop ('m is not more than max(
a,c,R0)')
  #This one makes sense but does not. Essentially it is a validation point that says if this condition is met, end sequence because the answer would be nonsense. I am just not sure how to articulate that from a bottom up approach.
 if(any(R0 < 0 | R0 > (m-1))) stop ('R0 is not betwe
en 0 and m-1')
  #Another confusing validation point

 U <- vector(length = n)
 #Complex assignment, would need to ask him about this and read on vectors.
 R <- R0
 #R0 was included above, it is now being assigned to a variable.
 #The function starts off with definitions and exceptions, moves to more complex definitions where in stead of defining words, we begin to define sentences [multiple words are given a specific meaning at once]
 for (i in 1:n) {
   #The for loop is a unique sentence, it is not an assignment or exception management like everything above, this is actually a command. It says for each upcoming variable, execute the instructions according to the parameters above and below until you cannot anymore.
 R <- (a * R + c) %% m
 U[i] <- R / m
 }

 return(U)
}
#Brilliant
# Print 9 random numbers on the interval [0, 1)
lcg.rand(n = 20, m = 200, a = 11, c = 8, R0 = 5)
#0.315
#0.315 0.505 0.595 0.585 0.475 0.265 0.955 0.545 0.035 0.425 0.715 0.905 0.995 0.985 0.875 0.665 0.355
#0.945 0.435 0.825
```

